/*! greenaddress - 2014-09-15*/
var base64map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

if (typeof window == "undefined" || !window)
    var _window = {};
else
    var _window = window;

// Global Crypto object
var Crypto = _window.Crypto = {};

// Crypto utilities
var util = Crypto.util = {

	// Bit-wise rotate left
	rotl: function (n, b) {
		return (n << b) | (n >>> (32 - b));
	},

	// Bit-wise rotate right
	rotr: function (n, b) {
		return (n << (32 - b)) | (n >>> b);
	},

	// Swap big-endian to little-endian and vice versa
	endian: function (n) {

		// If number given, swap endian
		if (n.constructor == Number) {
			return util.rotl(n,  8) & 0x00FF00FF |
			       util.rotl(n, 24) & 0xFF00FF00;
		}

		// Else, assume array and swap all items
		for (var i = 0; i < n.length; i++)
			n[i] = util.endian(n[i]);
		return n;

	},

	// Generate an array of any length of random bytes
	randomBytes: function (n) {
		for (var bytes = []; n > 0; n--)
			bytes.push(Math.floor(Math.random() * 256));
		return bytes;
	},

	// Convert a byte array to big-endian 32-bit words
	bytesToWords: function (bytes) {
		for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
			words[b >>> 5] |= bytes[i] << (24 - b % 32);
		return words;
	},

	// Convert big-endian 32-bit words to a byte array
	wordsToBytes: function (words) {
		for (var bytes = [], b = 0; b < words.length * 32; b += 8)
			bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
		return bytes;
	},

	// Convert a byte array to a hex string
	bytesToHex: function (bytes) {
		for (var hex = [], i = 0; i < bytes.length; i++) {
			hex.push((bytes[i] >>> 4).toString(16));
			hex.push((bytes[i] & 0xF).toString(16));
		}
		return hex.join("");
	},

	// Convert a hex string to a byte array
	hexToBytes: function (hex) {
		for (var bytes = [], c = 0; c < hex.length; c += 2)
			bytes.push(parseInt(hex.substr(c, 2), 16));
		return bytes;
	},

	// Convert a byte array to a base-64 string
	bytesToBase64: function (bytes) {

		// Use browser-native function if it exists
		if (typeof btoa == "function") return btoa(Binary.bytesToString(bytes));

		for(var base64 = [], i = 0; i < bytes.length; i += 3) {
			var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
			for (var j = 0; j < 4; j++) {
				if (i * 8 + j * 6 <= bytes.length * 8)
					base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
				else base64.push("=");
			}
		}

		return base64.join("");

	},

	// Convert a base-64 string to a byte array
	base64ToBytes: function (base64) {

		// Use browser-native function if it exists
		if (typeof atob == "function") return Binary.stringToBytes(atob(base64));

		// Remove non-base-64 characters
		base64 = base64.replace(/[^A-Z0-9+\/]/ig, "");

		for (var bytes = [], i = 0, imod4 = 0; i < base64.length; imod4 = ++i % 4) {
			if (imod4 == 0) continue;
			bytes.push(((base64map.indexOf(base64.charAt(i - 1)) & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2)) |
			           (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
		}

		return bytes;

	}

};

// Crypto mode namespace
Crypto.mode = {};

// Crypto character encodings
var charenc = Crypto.charenc = {};

// UTF-8 encoding
var UTF8 = charenc.UTF8 = {

	// Convert a string to a byte array
	stringToBytes: function (str) {
		return Binary.stringToBytes(unescape(encodeURIComponent(str)));
	},

	// Convert a byte array to a string
	bytesToString: function (bytes) {
		return decodeURIComponent(escape(Binary.bytesToString(bytes)));
	}

};

// Binary encoding
var Binary = charenc.Binary = {

	// Convert a string to a byte array
	stringToBytes: function (str) {
		for (var bytes = [], i = 0; i < str.length; i++)
			bytes.push(str.charCodeAt(i));
		return bytes;
	},

	// Convert a byte array to a string
	bytesToString: function (bytes) {
		for (var str = [], i = 0; i < bytes.length; i++)
			str.push(String.fromCharCode(bytes[i]));
		return str.join("");
	}

};


var commonNFCXGaitMNCListener = function(nfcEvent) {

    var message = nfcEvent.tag.ndefMessage;
    for (var i = 0; i < message.length; i++) {
        var type = nfc.bytesToString(message[i].type);
        if (type == 'x-gait/mnc' || type == 'x-ga/en') {
            var data = [];
            // convert signed to unsigned:
            for (var j = 0; j < message[i].payload.length; j++) {
                var number = message[i].payload[j];
                data.push(number < 0 ? number + 256 : number);
            }
            window.GA_NFC_LOGIN_DATA = data;
            window.location.href = BASE_URL + '/' + LANG + '/wallet.html#/';
            break;
        }
    }
};

var commonResumeListener = function() {
    console.log('app resumed');
};

var handleOpenURL = function(url) {  // iOS Cordova
    if (url.indexOf('bitcoin:') == 0) {
        location.hash = '#/uri?uri=' + encodeURIComponent(url);
    }
}

var keyboardHide = function() {
    // workaround for http://stackoverflow.com/questions/19169115/phonegap-keyboard-changes-window-height-in-ios-7
    // ('When the keyboard is closed the whole bottom half of the app is gone,')
    var oldScroll = document.body.scrollTop;
    document.body.scrollTop = 0;
    setTimeout(function() { document.body.scrollTop = oldScroll; }, 0);

    // workaround for http://stackoverflow.com/questions/15199072/ios-input-focused-inside-fixed-parent-stops-position-update-of-fixed-elements
    // (Cordova app only)
    document.getElementById('notices_container').setAttribute('style', '');
    document.getElementsByClassName('menu-mobile')[0].setAttribute('style', '');
    document.getElementsByClassName('menu-mobile-bottom')[0].setAttribute('style', '');
    window.removeEventListener('scroll', setNotificationsTop);
}

var keyboardWillShow = function() {
    document.getElementsByClassName('menu-mobile')[0].setAttribute('style',
        'position: absolute');
    document.getElementsByClassName('menu-mobile-bottom')[0].setAttribute('style',
        'position: absolute; bottom: initial; top: ' + (document.height - 35) + "px");
}


var setNotificationsTop = function() {
    document.getElementById('notices_container').setAttribute('style',
            'position: absolute; top: ' + (window.scrollY + 25) + "px");
}

var keyboardDidShow = function() {
    window.addEventListener('scroll', setNotificationsTop);
    setNotificationsTop();
}

document.addEventListener('deviceready', function () {
    console.log('app device ready');
    nfc.addMimeTypeListener('x-ga/en', commonNFCXGaitMNCListener);
    nfc.addMimeTypeListener('x-gait/mnc', commonNFCXGaitMNCListener);
    document.addEventListener("offline", function() {
        // workaround for not being able to open local offline.html file
        console.log('redirect to error page via hack');
        window.location.href = window.location.href;
    });
});

